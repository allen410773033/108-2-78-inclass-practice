list(
name="emilyluckey",
email="emily007@gmail.com",
time=ymd_hms("2020-03-26T08:18:40Z")
)
commit <- list(
author=authorValues,
commmitter=committerValues,
message="update"
)
print(commit)
library(jsonlite) # 不少同學這行會有Error，還記得如何排除嗎？
toJSON(commit)
'天氣預報_2020-03-31<-list(city=台北市,highest temperature=25,lowest temperature=18),list(city=新北市,highest temperature=24,lowest temperature=15)
course1_1081<-list(name=個經,teacher=Alice,grade=85)course2_1081<-list(name=總經,teacher=Mark,grade=78)`108-1修課紀錄`<-list(course1_1081,course2_1081)course1_1082<-list(name=作業研究,teacher=Jason,grade=90)`108-2修課紀錄`<-list(course1_1082)
library(jsonlite) # 不少同學這行會有Error，還記得如何排除嗎？
toJSON(commit)
>
# 108-1
course1_1081 <-
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
course2_1081 <-
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
`108-1修課記錄` <-
list(
course1_1081,
course2_1081
)
# 108-2
course1_1082 <-
list(
name="作業研究",
teacher="Jason",
grade=90
)
`108-2修課記錄` <-
list(
course1_1082
)
# 整合兩學期
`每學期修課記錄` <- list(
`108-1`=`108-1修課記錄`,
`108-2`=`108-2修課記錄`
)
# 完成記錄
`小明的修課記錄` <-
list(
name="小明",
semesters=`每學期修課記錄`
)
# 108-1
course1_1081 <-
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
course2_1081 <-
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
`108-1修課記錄` <-
list(
course1_1081,
course2_1081
)
# 108-2
course1_1082 <-
list(
name="作業研究",
teacher="Jason",
grade=90
)
`108-2修課記錄` <-
list(
course1_1082
)
# 整合兩學期
`每學期修課記錄` <- list(
`108-1`=`108-1修課記錄`,
`108-2`=`108-2修課記錄`
)
# 完成記錄
`小明的修課記錄` <-
list(
name="小明",
semesters=`每學期修課記錄`
)
#108-1
course1_1081<-
list()
course1_1081<-
list( )
course1_1081<-
list(name=個經,)
course1_1081<-
list(
name=個經,
teacher=Alice,
grade=85
)
course1_1081<-
+ list(
+ name="個經",
+ teacher=Alice,
+ grade=85
+ )
# 108-1
course1_1081 <-
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
course2_1081 <-
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
`108-1修課記錄` <-
list(
course1_1081,
course2_1081
)
# 108-2
course1_1082 <-
list(
name="作業研究",
teacher="Jason",
grade=90
)
`108-2修課記錄` <-
list(
course1_1082
)
# 整合兩學期
`每學期修課記錄` <- list(
`108-1`=`108-1修課記錄`,
`108-2`=`108-2修課記錄`
)
# 完成記錄
`小明的修課記錄` <-
list(
name="小明",
semesters=`每學期修課記錄`
)
#108-1
course1_1081<-
list(
name="總經",
teacher=Alice,
grade=85
)
# 108-1
course1_1081 <-
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
course2_1081 <-
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
`108-1修課記錄` <-
list(
course1_1081,
course2_1081
)
# 108-2
course1_1082 <-
list(
name="作業研究",
teacher="Jason",
grade=90
)
`108-2修課記錄` <-
list(
course1_1082
)
# 整合兩學期
`每學期修課記錄` <- list(
`108-1`=`108-1修課記錄`,
`108-2`=`108-2修課記錄`
)
# 完成記錄
`小明的修課記錄` <-
list(
name="小明",
semesters=`每學期修課記錄`
)
#108-1
> course1_1081<-
+ list(
+ name="總經",
+ teacher=Alice,
+ grade=85
+ )
#108-1
> course1_1081<-
+ list(
+ name="總經",
+ teacher="Alice",
+ grade=85
+ )
#108-1
> course1_1081<-
list(
name="總經",
teacher="Alice",
grade=85
)
course2_1081<-
list(
name=總經,
teacher="Mark",
name="總經",
teacher="Mark",
grade=78
)
course2_1081<-
list(
name=總經,
)
course2_1081<-
list(
name="總經",
teacher="Mark",
grade=78
)
course2_1081<-
list(
name="總經",
teacher="Mark",
grade=78
)
source("https://www.dropbox.com/s/mk7bxvu6a3lxf79/studentEnvironmentReport.R?dl=1",print.eval = T)
# p=1.2的需求量
p=1.2
qd <- 10-5*p # 小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
.Last.value
demand_return(1.2) # 相當於
4
demand_return(1.2) -> q_d1.2 # 相當於
4 -> q_d1.2
q_d <- 5
demand_return(p=1.2)
print(q_d)
demand_return(1.2) -> q_d1.2 # 相當於
4 -> q_d1.2
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather("臺中市",today())
askSilly_weather("花蓮縣",today())
class(demand_return)
# 查詢函數formals arguments要求
formals(askSilly_weather)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
typeof(demand_return)
# 查詢函數執行所要求環境
environment(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
environment(demand_return)
environment(myDemand)
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
# 之後才執行以下程式
if(
str_detect(studentId,'[43](1[01][0-9]|9[0-9])[0-9]{5}',negate=T)
) {
warning("你所輸入的學號不正確")
}
# 先執行此行輸入學號
readline(prompt = "410773033") -> studentId
}
# 先執行此行輸入學號
readline(prompt = "410773033") -> studentId
}
if(
str_detect(studentId,'[43](1[01][0-9]|9[0-9])[0-9]{5}',negate=T)
) {
warning("你所輸入的學號不正確")
switch(實現的conditionExpression,
"conditionExpression1"= {    },
"conditionExpression2"= {    },
:
:
"conditionExpressionN"= {    },
{    })
n<- 540
conditionExpression_outcome=
ifelse(n %% 2==0, "even", "odd")
switch(
conditionExpression_outcome,
"even"={fvalue <- n/2}, # 偶數
"odd"=fvalue <- -(n+1)/2, # 奇數；只有一行指令可省略{}
warning("n要整數喔")
)
print(fvalue)
grades <- c(52, 77, 59, 88, 90)
ifelse(grades >= 60, "及格", "不及格")
miniFun <- function(){
lubridate::now()
}
miniFun()
miniFun2 <- function() lubridate::now()
miniFun2()
result <-
{
x <- 2
y <- 3
x**y+15
}
print(result)
result2 <-
{
x <- 2
y <- 3
if(x< 3){
warning("x值太小")
} else {
x**y+15
}
}
print(result2)
myFun <- function(x,y){
return(x**y+15)
}
# 等同於
myFun2 <- function(x,y){
x**y+15
}
myFun(5,3) -> outcome
myFun2(5,3) -> outcome2
print(outcome)
print(outcome2)
grade <- sample(1:100, 10, replace=T)
grade %>%
cut(c(-1,69,79,89,100)) -> grade
levels(grade)
switch(
as.character(grade[[1]]),
"(-1,69]"={
print("-_-")
"F"},
"(69,79]"={
print("棒")
"C"
},
"(79,89]"={
print("好棒")
"B"
},
"(89,100]"={
print("好棒棒")
"A"
}
) -> letterGrade # 有回存時要螢幕印出的訊息一定要加print
nowtime <- glue::glue("{today()} 18:00:00") %>% ymd_hms(tz="Asia/Taipei")
library(lubridate)
library(glue)
# 建立可當cutpoints的一天時間點
cutpoints <-
c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
)
cutpoints %>%
ymd_hms(tz="Asia/Taipei") -> cutpoints
## 將nowtime轉成它對應的時段是"morning", "evening", 或其他。
cut(nowtime, cutpoints) -> nowtime
levels(nowtime)[c(1,3,5)] <-
c("morning","evening","jazz time")
## 使用switch決定要做什麼事
switch(
as.character(nowtime),
"morning"={
print("要不要來閱讀點國際時事？")
browseURL("https://economist.com")
},
"evening"={
print("需不需要點餐呢？")
browseURL("https://www.foodpanda.com.tw/")
},
"jazz time"={
print("放鬆聽點Jazz。")
browseURL("https://open.spotify.com/playlist/37i9dQZF1DXbITWG1ZJKYt")
},
{
print("機器人要休息，饒了我吧～～")
}
)
myAnswer <- c(2,3,6)
correctAnswer <- c(2,3,5)
if(myAnswer == correctAnswer){ # 只取用第一個T/F
print("你答對了")
}
myAnswer <- c(2,3,6)
correctAnswer <- c(2,3,5)
if(all(myAnswer == correctAnswer)){ # 要全TRUE
print("你答對了")
}
myAge <- 40
myChildrenNumber <- 5
if(myAge >=65 | myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
if(myAge >=65 ||  myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
x <- c(2,5,10,-21,3,8)
ifelse(x %% 2==0, "even", "odd")
y <- sample(40:100,20, replace=T)
dplyr::case_when(
y < 60 ~ "F",
60<=y & y < 70 ~"D",
71<=y & y < 80 ~"C",
80<=y & y < 90 ~"B",
90<=y ~ "A"
)
